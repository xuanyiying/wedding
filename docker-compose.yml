# =============================================================================
# Wedding Club - Docker Compose 配置文件
# =============================================================================
# 创建时间: 2025-09-01
# 维护者: DevOps Team
# 描述: 支持多环境的统一编排配置
# 环境变量: 通过 .env 文件加载
# =============================================================================
services:
  # =============================================================================
  # 前端Web应用服务 (Frontend Web Service)
  # =============================================================================
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
    image: wedding-web:${ENVIRONMENT:-prod}-latest
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:3000}
      - VITE_UPLOAD_URL=${VITE_UPLOAD_URL:-http://localhost:3000/upload}
      - VITE_MINIO_URL=${VITE_MINIO_URL:-http://localhost:9000}
    container_name: wedding-web-${ENVIRONMENT:-prod}
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-80}:80"
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # 后端API服务 (Backend API Service)
  # =============================================================================
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    image: wedding-api:${ENVIRONMENT:-prod}-latest
    container_name: wedding-api-${ENVIRONMENT:-prod}
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${SERVER_PORT:-3000}
      - DB_HOST=${MYSQL_HOST:-mysql}
      - DB_PORT=${MYSQL_PORT:-3306}
      - DB_NAME=${MYSQL_DATABASE:-wedding_club}
      - DB_USERNAME=${MYSQL_USER:-wedding_user}
      - DB_PASSWORD=${MYSQL_PASSWORD:-W3dd1ng_Us3r_2024_Pr0d_S3cur3!}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-R3d1s_W3dd1ng_2024_Pr0d_S3cur3!}
      - JWT_SECRET=${JWT_SECRET:-JWT_W3dd1ng_S3cr3t_2024_Pr0duct10n_K3y_V3ry_S3cur3_L0ng_Str1ng!}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-JWT_W3dd1ng_R3fr3sh_S3cr3t_2024_Pr0duct10n_K3y_V3ry_S3cur3_L0ng_Str1ng!}
      - SMTP_HOST=${SMTP_HOST:-smtp.qq.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-admin@yourcompany.com}
      - SMTP_PASS=${SMTP_PASS:-your_smtp_password}
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT:-http://localhost:9000}
      - VITE_MINIO_URL=${VITE_MINIO_URL:-http://localhost:9000}
      - OSS_ENDPOINT=${OSS_ENDPOINT:-http://minio:9000}
      - OSS_ACCESS_KEY=${OSS_ACCESS_KEY:-weddingadmin}
      - OSS_SECRET_KEY=${OSS_SECRET_KEY:-M1n10_W3dd1ng_2024_Pr0d_S3cur3!}
      - OSS_BUCKET=${OSS_BUCKET:-wedding-media-prod}
    volumes:
      - ./deployment/uploads:/app/uploads
      - ./deployment/logs/api:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # MySQL 数据库服务 (Database Service)
  # =============================================================================
  mysql:
    image: mysql:8.0
    container_name: wedding-mysql-${ENVIRONMENT:-prod}
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-W3dd1ng_R00t_2024_Pr0d_S3cur3!}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-wedding_club}
      - MYSQL_USER=${MYSQL_USER:-wedding_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-W3dd1ng_Us3r_2024_Pr0d_S3cur3!}
      - TZ=Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deployment/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./deployment/mysql/init:/docker-entrypoint-initdb.d:ro
      - ./deployment/logs/mysql:/var/log/mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # =============================================================================
  # Redis 缓存服务 (Cache Service)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: wedding-redis-${ENVIRONMENT:-prod}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/etc/redis/redis.conf:ro
      - ./deployment/logs/redis:/var/log/redis
    command: redis-server /etc/redis/redis.conf
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # MinIO 对象存储服务 (Object Storage Service)
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: wedding-minio-${ENVIRONMENT:-prod}
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-weddingadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-wedding123}
      - MINIO_SERVER_URL=http://minio:9000
    volumes:
      - ./deployment/uploads:/data
      - ./deployment/logs/minio:/var/log/minio
    command: server /data --console-address ":9001"
    networks:
      - wedding-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Nginx 反向代理 (仅生产环境)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: wedding-nginx-${ENVIRONMENT:-prod}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - ./deployment/logs/nginx:/var/log/nginx
      - ./deployment/uploads:/var/www/uploads:ro
    depends_on:
      - web
      - api
    networks:
      - wedding-network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# =============================================================================
# 网络配置 (Networks)
# =============================================================================
networks:
  wedding-network:
    driver: bridge
    name: wedding-${ENVIRONMENT:-prod}-network

# =============================================================================
# 数据卷配置 (Volumes)
# =============================================================================
volumes:
  mysql_data:
    name: wedding-mysql-${ENVIRONMENT:-prod}-data
  redis_data:
    name: wedding-redis-${ENVIRONMENT:-prod}-data
  minio_data:
    name: wedding-minio-${ENVIRONMENT:-prod}-data