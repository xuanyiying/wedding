services:
  # 基础设施服务
  mysql:
    image: mysql:8.0
    container_name: wedding_mysql
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: wedding_host
      MYSQL_USER: wedding
      MYSQL_PASSWORD: wedding123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password --bind-address=0.0.0.0
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - wedding-net

  redis:
    image: redis:7-alpine
    container_name: wedding_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - wedding-net

  minio:
    image: minio/minio:latest
    container_name: wedding_minio
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
    environment:
      MINIO_ROOT_USER: rustfsadmin
      MINIO_ROOT_PASSWORD: rustfssecret123
    ports:
      - "9000:9000"  # S3 API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - wedding-net

  # 应用服务
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: wedding_server
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - "3000:3000"
    environment:
      - API_HOST=server
    env_file:
      - ./server/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - wedding-net

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: wedding_web
    restart: always
    ports:
      - "5173:5173"
    env_file:
      - ./web/.env
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - wedding-net

  caddy:
    image: caddy:2-alpine
    container_name: wedding_caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      web:
        condition: service_healthy
      server:
        condition: service_healthy
    networks:
      - wedding-net

networks:
  wedding-net:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  minio_data:
  caddy_data:
  caddy_config: