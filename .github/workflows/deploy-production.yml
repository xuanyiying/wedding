name: Deploy to Tencent Cloud Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME_API: wedding-server
  IMAGE_NAME_WEB: wedding-web

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install web dependencies
        working-directory: ./web
        run: npm ci --legacy-peer-deps

      - name: Lint web code
        working-directory: ./web
        run: npm run lint

      - name: Type check web code
        working-directory: ./web
        run: npm run type-check

      - name: Install Go dependencies
        working-directory: ./server
        run: go mod download

      - name: Lint Go code
        working-directory: ./server
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run

  # 运行测试
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    if: always() && (needs.code-quality.result == 'success' || needs.code-quality.result == 'skipped')
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: wedding_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install web dependencies
        working-directory: ./web
        run: npm ci --legacy-peer-deps

      - name: Run web tests
        working-directory: ./web
        run: npm run test:ci
        env:
          CI: true

      - name: Install Go dependencies
        working-directory: ./server
        run: go mod download

      - name: Run Go tests
        working-directory: ./server
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: wedding_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage.out
          flags: backend
          name: backend-coverage

  # 构建和推送镜像
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.force_deploy == 'true')
    permissions:
      contents: read
      packages: write
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=prod,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract Web metadata
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_WEB }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=prod,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always() && needs.build-and-push.result == 'success' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.force_deploy == 'true')
    environment:
      name: production
      url: http://114.132.225.94:8080
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Setup deployment environment
        run: |
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Deploy to Tencent Cloud
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASS: ${{ secrets.SSH_PASS }}
          API_IMAGE: ${{ needs.build-and-push.outputs.api-image }}
          WEB_IMAGE: ${{ needs.build-and-push.outputs.web-image }}
        run: |
          # 创建部署脚本
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "🚀 开始部署到生产环境..."
          
          # 创建部署目录
          mkdir -p /root/wedding
          cd /root/wedding
          
          # 备份现有部署
          if [[ -f "docker-compose.yml" ]]; then
              echo "📦 备份现有部署..."
              mkdir -p backups
              timestamp=$(date +"%Y%m%d-%H%M%S")
              tar -czf "backups/wedding-backup-$timestamp.tar.gz" . 2>/dev/null || true
          fi
          
          # 停止现有服务
          echo "⏹️ 停止现有服务..."
          docker-compose down --remove-orphans 2>/dev/null || true
          
          # 清理旧镜像
          echo "🧹 清理旧镜像..."
          docker image prune -f
          
          # 拉取新镜像
          echo "📥 拉取新镜像..."
          echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin
          docker pull "$API_IMAGE" || exit 1
          docker pull "$WEB_IMAGE" || exit 1
          
          # 启动服务
          echo "🚀 启动服务..."
          docker-compose up -d
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 30
          
          # 健康检查
          echo "🔍 执行健康检查..."
          max_attempts=30
          attempt=1
          
          while [[ $attempt -le $max_attempts ]]; do
              if curl -f -s "http://localhost:8080" > /dev/null; then
                  echo "✅ Web服务健康检查通过"
                  break
              fi
              
              if [[ $attempt -eq $max_attempts ]]; then
                  echo "❌ 健康检查失败"
                  docker-compose logs
                  exit 1
              fi
              
              echo "⏳ 健康检查尝试 $attempt/$max_attempts"
              sleep 10
              ((attempt++))
          done
          
          echo "🎉 部署成功！"
          docker-compose ps
          EOF
          
          # 传输部署文件
          echo "📤 传输部署文件..."
          sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no deployment/docker-compose-prod.yml "$SSH_USER@$SERVER_IP:/root/wedding/docker-compose.yml"
          sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no deployment/.env.prod "$SSH_USER@$SERVER_IP:/root/wedding/.env"
          sshpass -p "$SSH_PASS" scp -r -o StrictHostKeyChecking=no deployment/nginx "$SSH_USER@$SERVER_IP:/root/wedding/"
          
          # 执行部署
          echo "🚀 执行远程部署..."
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" \
            "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} GITHUB_ACTOR=${{ github.actor }} API_IMAGE='$API_IMAGE' WEB_IMAGE='$WEB_IMAGE'" \
            'bash -s' < deploy.sh

      - name: Verify deployment
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "🔍 验证部署状态..."
          
          # 等待服务完全启动
          sleep 60
          
          # 检查Web服务
          if curl -f -s "http://$SERVER_IP:8080" > /dev/null; then
              echo "✅ Web服务运行正常"
          else
              echo "❌ Web服务检查失败"
              exit 1
          fi
          
          # 检查API服务
          if curl -f -s "http://$SERVER_IP:3000/health" > /dev/null; then
              echo "✅ API服务运行正常"
          else
              echo "⚠️ API服务检查失败，但继续部署"
          fi
          
          echo "🎉 部署验证完成！"
          echo "🌐 访问地址: http://$SERVER_IP:8080"

  # 部署通知
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
              echo "🎉 Wedding平台已成功部署到生产环境！"
              echo "🌐 访问地址: http://114.132.225.94:8080"
              echo "📊 API服务: http://114.132.225.94:3000"
              echo "🗄️ MinIO控制台: http://114.132.225.94:9001"
          else
              echo "❌ 部署失败，请检查日志"
              exit 1
          fi