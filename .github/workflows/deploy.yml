name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          web/package-lock.json
          server/package-lock.json

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: |
          web/node_modules
          server/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('web/package-lock.json', 'server/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install frontend dependencies
      run: |
        cd web
        npm ci
    
    - name: Install backend dependencies
      run: |
        cd server
        npm ci
    
    - name: Run frontend tests
      run: |
        cd web
        npm run test:ci || echo "No tests configured yet"
    
    - name: Run backend tests
      run: |
        cd server
        npm test || echo "No tests configured yet"
    
    - name: Run frontend tests
      run: |
        cd web
        npm run test:run

    - name: Build frontend
      run: |
        cd web
        npm run build
    
    - name: Run backend tests
      run: |
        cd server
        npm run test:coverage

    - name: Build backend
      run: |
        cd server
        npm run build || echo "No build script configured"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:buildx-stable-1
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for frontend
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata (tags, labels) for backend
      id: meta-server
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./web
        file: ./web/Dockerfile
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        push: true
        tags: ${{ steps.meta-server.outputs.tags }}
        labels: ${{ steps.meta-server.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Send deployment start notification
      if: env.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "channel": "#deployments",
            "username": "Wedding Deployment Bot",
            "icon_emoji": ":rocket:",
            "text": ":rocket: *部署开始*\n项目: Wedding Client\n分支: ${{ github.ref_name }}\n提交: ${{ github.sha }}\n触发者: ${{ github.actor }}\n时间: $(date "+%Y-%m-%d %H:%M:%S")"
          }' \
          ${{ env.SLACK_WEBHOOK_URL }}
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /opt/wedding
          
          # Pull latest code
          git pull origin main
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker pull ghcr.io/${{ github.repository }}-web:latest
          docker pull ghcr.io/${{ github.repository }}-server:latest
          
          # Update docker-compose to use registry images
          sed -i 's|image: wedding-web-prod:latest|image: ghcr.io/${{ github.repository }}-web:latest|g' deployment/docker-compose-tencent.yml
          sed -i 's|build:|# build:|g' deployment/docker-compose-tencent.yml
          sed -i 's|context: ./server|# context: ./server|g' deployment/docker-compose-tencent.yml
          sed -i 's|dockerfile: Dockerfile|# dockerfile: Dockerfile|g' deployment/docker-compose-tencent.yml
          
          # Add server image configuration
          if ! grep -q "image: ghcr.io/${{ github.repository }}-server:latest" deployment/docker-compose-tencent.yml; then
            sed -i '/container_name: wedding_server_prod/a\    image: ghcr.io/${{ github.repository }}-server:latest' deployment/docker-compose-tencent.yml
          fi
          
          # Deploy with zero-downtime
          chmod +x deployment/deploy.sh
          ./deployment/deploy.sh
          
          # Verify deployment
          docker-compose -f deployment/docker-compose-tencent.yml ps
          
          # Health check
          sleep 30
          curl -f http://localhost:8080/health || echo "Health check failed"
          curl -f http://localhost:3000/api/v1/health || echo "API health check failed"
    
    - name: Send deployment success notification
      if: success() && env.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "channel": "#deployments",
            "username": "Wedding Deployment Bot",
            "icon_emoji": ":white_check_mark:",
            "text": ":white_check_mark: *部署成功*\n项目: Wedding Client\n分支: ${{ github.ref_name }}\n提交: ${{ github.sha }}\n部署时间: $(date "+%Y-%m-%d %H:%M:%S")\n访问地址: http://114.132.225.94"
          }' \
          ${{ env.SLACK_WEBHOOK_URL }}
          
    - name: Send deployment failure notification
      if: failure() && env.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{
            "channel": "#deployments",
            "username": "Wedding Deployment Bot",
            "icon_emoji": ":x:",
            "text": ":x: *部署失败*\n项目: Wedding Client\n分支: ${{ github.ref_name }}\n提交: ${{ github.sha }}\n时间: $(date "+%Y-%m-%d %H:%M:%S")\n请检查GitHub Actions日志获取详细信息"
          }' \
          ${{ env.SLACK_WEBHOOK_URL }}