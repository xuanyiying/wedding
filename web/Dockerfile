# 生产环境Web服务Dockerfile
# 多阶段构建，优化镜像大小和构建速度

# 构建阶段
FROM node:22-alpine AS builder

# 配置Alpine镜像源（提前配置以加速后续包安装）
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 设置工作目录
WORKDIR /app

# 配置npm镜像源（使用可靠的淘宝镜像源）
RUN npm config set registry https://registry.npmmirror.com && \
    npm config set cache /tmp/.npm

# 复制package文件
COPY package*.json ./

# 安装依赖（使用npm install替代npm ci，因为可能没有package-lock.json）
RUN npm install --legacy-peer-deps --no-audit --no-fund --progress=false --registry=https://registry.npmmirror.com && \
    rm -rf /tmp/.npm /root/.npm

# 复制所有源代码和配置文件
COPY . .

# 构建应用（使用并行构建优化）
RUN npm run build && \
    rm -rf node_modules/.cache /tmp/* /var/tmp/* /root/.npm

# 生产阶段 - 使用nginx提供静态文件服务
FROM nginx:1.25.4-alpine AS production

# 安装必要工具并创建缓存目录
RUN apk add --no-cache curl && \
    mkdir -p /var/cache/nginx && \
    chown -R nginx:nginx /var/cache/nginx && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# 复制构建产物
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制nginx配置文件（使用专为静态文件服务设计的配置）
COPY nginx-static.conf /etc/nginx/conf.d/default.conf

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# 暴露端口
EXPOSE 80

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]