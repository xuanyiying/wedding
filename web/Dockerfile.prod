# 生产环境Web服务Dockerfile
# 多阶段构建，优化镜像大小和构建速度

# 构建阶段
FROM node:18-alpine AS builder

# 配置Alpine镜像源（提前配置以加速后续包安装）
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 设置工作目录
WORKDIR /app

# 复制package文件
COPY package*.json ./

# 配置npm镜像源（使用可靠的淘宝镜像源）
RUN npm config set registry https://registry.npmmirror.com && \
    npm config set cache /tmp/.npm && \
    npm config set prefer-offline true

# 安装依赖（优化参数以提升安装速度）
RUN npm ci --legacy-peer-deps --no-audit --no-fund --prefer-offline --progress=false && \
    rm -rf /tmp/.npm /root/.npm

# 设置生产环境变量（提前设置以优化缓存）
ENV NODE_ENV=production
ENV VITE_API_URL=http://114.132.225.94:3000
ENV VITE_UPLOAD_URL=http://114.132.225.94:9000

# 复制源代码（.dockerignore应排除node_modules等不必要文件）
COPY . .

# 构建应用（使用并行构建优化）
RUN npm run build --max_old_space_size=4096 && \
    rm -rf node_modules/.cache /tmp/* /var/tmp/* /root/.npm

# 生产阶段
FROM nginx:alpine AS production

# 一次性配置Alpine镜像源并安装工具（减少层数）
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
    apk update && \
    apk add --no-cache curl && \
    mkdir -p /var/log/nginx && \
    chown -R nginx:nginx /var/log/nginx /var/cache/nginx && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# 复制自定义nginx配置
COPY nginx.conf /etc/nginx/nginx.conf

# 从构建阶段复制构建产物并设置权限
COPY --from=builder --chown=nginx:nginx /app/dist /usr/share/nginx/html

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# 暴露端口
EXPOSE 80

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]