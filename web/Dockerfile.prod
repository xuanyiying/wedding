# 生产环境Web服务Dockerfile
# 多阶段构建，优化镜像大小和构建速度

# 构建阶段
FROM node:18-alpine AS builder

# 配置Alpine镜像源（提前配置以加速后续包安装）
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 设置工作目录
WORKDIR /app

# 复制package文件
COPY package*.json ./

# 配置npm镜像源（使用可靠的淘宝镜像源）
RUN npm config set registry https://registry.npmmirror.com && \
    npm config set cache /tmp/.npm

# 安装依赖（优化参数以提升安装速度）
RUN npm ci --legacy-peer-deps --no-audit --no-fund --progress=false && \
    rm -rf /tmp/.npm /root/.npm

# 设置生产环境变量（提前设置以优化缓存）
ENV NODE_ENV=production
ENV VITE_API_URL=http://114.132.225.94:3000
ENV VITE_UPLOAD_URL=http://114.132.225.94:9000

# 复制源代码（.dockerignore应排除node_modules等不必要文件）
COPY . .

# 构建应用（使用并行构建优化）
RUN npm run build --max_old_space_size=4096 && \
    rm -rf node_modules/.cache /tmp/* /var/tmp/* /root/.npm

# 生产阶段 - 仅复制静态文件到共享卷
FROM alpine:latest AS production

# 配置Alpine镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
    apk update && \
    apk add --no-cache rsync && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# 从构建阶段复制构建产物
COPY --from=builder /app/dist /app/dist

# 创建启动脚本来复制文件到共享卷
RUN echo '#!/bin/sh' > /copy-files.sh && \
    echo 'echo "Copying static files to shared volume..."' >> /copy-files.sh && \
    echo 'rsync -av /app/dist/ /usr/share/nginx/html/' >> /copy-files.sh && \
    echo 'echo "Files copied successfully"' >> /copy-files.sh && \
    echo 'echo "Keeping container alive..."' >> /copy-files.sh && \
    echo 'tail -f /dev/null' >> /copy-files.sh && \
    chmod +x /copy-files.sh

# 启动脚本
CMD ["/copy-files.sh"]