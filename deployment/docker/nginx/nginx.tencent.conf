# Wedding Club - 腾讯云无域名部署 Nginx 配置
# 简化版本，适用于IP直接访问

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 字符编码设置
    charset utf-8;
    source_charset utf-8;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" rt=$request_time';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 基础性能配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # 客户端配置
    client_max_body_size 100M;
    client_body_buffer_size 1M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Gzip压缩
    gzip on;
    gzip_min_length 1024;
    gzip_comp_level 4;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 基础安全头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # 上游服务器配置 - 增加健康检查和负载均衡
    upstream api_backend {
        server wedding-api:3000 max_fails=3 fail_timeout=30s;
        keepalive 120;
        keepalive_requests 100;
    }

    upstream minio_backend {
        server wedding-minio:9000;
        keepalive 3000;
    }

    # 限流配置 - 放宽限制，避免正常用户受影响
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=upload_limit:5m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # 主服务器配置 - 监听80端口，接受任意IP访问
    server {
        listen 80;
        server_name _;  # 接受任意域名/IP访问
        root /usr/share/nginx/html;
        index index.html;
        
        # 客户端请求配置
        client_header_timeout 60s;
        client_body_timeout 300s;

        # 健康检查端点 - 简单直接返回
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # API代理 - 优化认证和错误处理
        location /api/ {
            limit_req zone=api_limit burst=30 nodelay;
            limit_conn conn_limit 20;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Charset "utf-8";
            
            # 超时配置 - 增加超时时间
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            
            # 代理缓冲设置 - 保持连接稳定性
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # 错误重试
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            # 确保响应头包含UTF-8编码
            add_header Content-Type "application/json; charset=utf-8" always;
        }
        
        # Swagger UI特殊处理 - 支持静态资源
        location /api/v1/docs {
            proxy_pass http://api_backend/api/v1/docs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Swagger特殊超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 允许大响应体（Swagger JSON可能较大）
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
            
            # 确保正确的Content-Type
            proxy_set_header Accept-Encoding "";
        }

        # Swagger JSON文档
        location /api/v1/docs.json {
            proxy_pass http://api_backend/api/v1/docs.json;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Accept-Encoding "";
        }

        # 直传OSS上传API - 视频直传专用优化
        location /api/v1/direct-upload/ {
            # 直传API速率限制 - 相对宽松
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn conn_limit 10;
            
            # 直传API只处理元数据，请求体很小
            client_max_body_size 1M;
            client_body_buffer_size 64k;
            client_body_timeout 60s;
            
            proxy_pass http://api_backend/api/v1/direct-upload/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # 快速响应配置 - 直传API响应快
            proxy_connect_timeout 15s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 直传API缓冲优化
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
            proxy_busy_buffers_size 16k;
            
            # 错误处理
            proxy_intercept_errors on;
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 30s;
            
            # 响应头优化
            add_header X-Upload-Method "direct" always;
            add_header Content-Type "application/json; charset=utf-8" always;
        }

        # 传统文件上传路由 - 保持兼容性
        location /api/v1/files/upload {
            limit_req zone=upload_limit burst=10 nodelay;
            limit_conn conn_limit 10;
            
            # 大文件上传优化配置
            client_max_body_size 500M;
            client_body_buffer_size 16M;
            client_body_timeout 900s;
            
            proxy_pass http://api_backend/api/v1/files/upload;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Accept-Charset "utf-8";
            
            # 上传专用超时配置 - 大幅增加
            proxy_connect_timeout 600s;
            proxy_send_timeout 900s;
            proxy_read_timeout 900s;
            
            # 文件上传缓冲设置 - 混合模式
            proxy_request_buffering off;
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 32 16k;
            proxy_busy_buffers_size 32k;
            proxy_max_temp_file_size 2048m;
            
            # 错误处理和重试
            proxy_intercept_errors on;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 60s;
            error_page 502 503 504 = @upload_fallback;
            
            # 响应头优化
            add_header X-Upload-Method "traditional" always;
            add_header Content-Type "application/json; charset=utf-8" always;
        }

        # OSS直传代理 - 支持CORS预检
        location ~ ^/oss-proxy/(.*)$ {
            # 处理CORS预检请求
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin '*' always;
                add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Content-Length 0 always;
                add_header Content-Type 'text/plain; charset=utf-8' always;
                return 204;
            }
            
            # 代理到OSS
            proxy_pass $1;
            proxy_http_version 1.1;
            proxy_set_header Host $proxy_host;
            proxy_set_header Connection "";
            
            # 大文件上传支持
            client_max_body_size 500M;
            client_body_buffer_size 16M;
            client_body_timeout 900s;
            
            # 超时配置
            proxy_connect_timeout 300s;
            proxy_send_timeout 900s;
            proxy_read_timeout 900s;
            
            # 禁用缓冲以支持大文件流式传输
            proxy_request_buffering off;
            proxy_buffering off;
            
            # CORS头
            add_header Access-Control-Allow-Origin '*' always;
            add_header Access-Control-Expose-Headers 'Content-Length,Content-Range,ETag' always;
        }
        
        # 上传失败回退处理
        location @upload_fallback {
            return 503 '{"success":false,"message":"文件上传服务暂时不可用，请稍后重试","code":"UPLOAD_SERVICE_UNAVAILABLE"}';
            add_header Content-Type application/json;
        }

        # 静态文件缓存
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 7d;
            add_header Cache-Control "public";
            add_header Vary "Accept-Encoding";
            try_files $uri =404;
        }

        # SPA路由支持
        location / {
            try_files $uri $uri/ /index.html;
            
            # HTML文件不缓存
            location ~* \.html$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
            }
        }

        # 安全配置
        location ~ /\. {
            deny all;
        }
        
        location ~* \.(bak|config|sql|ini|log|sh|inc|swp)$ {
            deny all;
        }

        # 错误页面
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}