version: '3.8'

services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: wedding_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./logs/mysql:/var/log/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - wedding_prod_network
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: wedding_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
    volumes:
      - redis_prod_data:/data
      - ./logs/redis:/var/log/redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - wedding_prod_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      timeout: 3s
      retries: 5
      interval: 30s
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # MinIO对象存储服务
  minio:
    image: minio/minio:latest
    container_name: wedding_minio_prod
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: http://${SERVER_IP}:${MINIO_CONSOLE_PORT:-9001}
    volumes:
      - minio_prod_data:/data
      - ./logs/minio:/var/log/minio
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - wedding_prod_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 30s
      retries: 3
      interval: 30s
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # API后端服务
  api:
    image: ${SERVER_IMAGE:-wedding-server:latest}
    container_name: wedding_api_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_HOST: 0.0.0.0
      API_PORT: ${API_PORT:-3000}
      
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # MinIO配置
      OSS_TYPE: minio
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET:-wedding-media}
      
      # JWT配置
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      
      # 日志配置
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_DIR: /app/logs
      
      # 健康检查配置
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-30}
      
      # 性能配置
      NODE_OPTIONS: --max-old-space-size=512
    volumes:
      - ./uploads:/app/uploads
      - ./logs/api:/app/logs
    ports:
      - "${API_PORT:-3000}:${API_PORT:-3000}"
    networks:
      - wedding_prod_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-3000}/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Web前端服务
  web:
    image: ${WEB_IMAGE:-wedding-web:latest}
    container_name: wedding_web_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NGINX_HOST: ${SERVER_IP}
      NGINX_PORT: ${WEB_PORT:-8080}
      
      # API配置
      VITE_API_URL: http://${SERVER_IP}:${API_PORT:-3000}/api
      VITE_UPLOAD_URL: http://${SERVER_IP}:${API_PORT:-3000}/files
    volumes:
      - ./logs/nginx:/var/log/nginx
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "${WEB_PORT:-8080}:80"
    networks:
      - wedding_prod_network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

volumes:
  mysql_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/mysql
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  minio_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/minio

networks:
  wedding_prod_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: wedding-prod-br
      com.docker.network.driver.mtu: 1500