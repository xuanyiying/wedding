user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 安全头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # 上游服务器配置 - 负载均衡优化
    upstream api_backend {
        # 多个后端服务器实例（可根据需要扩展）
        server api:3000 weight=3 max_fails=3 fail_timeout=30s;
        # server api2:3000 weight=2 max_fails=3 fail_timeout=30s backup;
        
        # 连接池优化
        keepalive 64;
        keepalive_requests 1000;
        keepalive_timeout 60s;
        
        # 负载均衡方法
        # least_conn;  # 最少连接数
        # ip_hash;     # IP哈希
        # hash $request_uri consistent;  # 一致性哈希
    }

    upstream minio_backend {
        server minio:9000 weight=1 max_fails=2 fail_timeout=20s;
        # server minio2:9000 weight=1 max_fails=2 fail_timeout=20s backup;
        
        keepalive 32;
        keepalive_requests 500;
        keepalive_timeout 60s;
    }

    # 缓存配置
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=500m inactive=1d use_temp_path=off;
    proxy_temp_path /var/cache/nginx/temp;
    
    # 限流配置
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 登录API特殊限流
        location /api/v1/auth/login {
            limit_req zone=login_limit burst=3 nodelay;
            limit_conn conn_limit 5;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # 超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 禁用缓存
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }

        # API代理 - 优化版本
        location /api/ {
            # 限流配置
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn conn_limit 10;
            
            # 代理配置
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # 缓存配置（仅对GET请求）
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            proxy_cache_bypass $http_upgrade $cookie_nocache $arg_nocache;
            proxy_no_cache $http_upgrade $cookie_nocache $arg_nocache;
            
            # 添加缓存状态头
            add_header X-Cache-Status $upstream_cache_status;
            
            # 超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # 文件上传代理到 MinIO - 优化版本
        location /upload/ {
            # 上传限流
            limit_req zone=upload_limit burst=5 nodelay;
            limit_conn conn_limit 5;
            
            # 代理配置
            proxy_pass http://minio_backend/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # 文件上传配置
            client_max_body_size 100M;
            client_body_buffer_size 1M;
            client_body_timeout 60s;
            
            # 禁用代理缓冲以支持大文件上传
            proxy_request_buffering off;
            proxy_buffering off;
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # 进度支持
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
        }

        # 文件服务代理
        location /files/ {
            proxy_pass http://api_backend/files/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            client_max_body_size 100M;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # 静态文件缓存 - 分层缓存策略
        # 长期缓存的静态资源（字体、图标等）
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            try_files $uri =404;
            
            # 启用静态文件缓存
            proxy_cache static_cache;
            proxy_cache_valid 200 1y;
        }
        
        # 图片资源缓存
        location ~* \.(png|jpg|jpeg|gif|ico|svg|webp|avif)$ {
            expires 6M;
            add_header Cache-Control "public";
            add_header Vary "Accept-Encoding";
            try_files $uri =404;
            
            # 图片压缩优化
            gzip_static on;
            
            # 启用静态文件缓存
            proxy_cache static_cache;
            proxy_cache_valid 200 6M;
        }
        
        # CSS和JS文件缓存
        location ~* \.(css|js)$ {
            expires 1M;
            add_header Cache-Control "public";
            add_header Vary "Accept-Encoding";
            try_files $uri =404;
            
            # 启用gzip压缩
            gzip_static on;
            
            # 启用静态文件缓存
            proxy_cache static_cache;
            proxy_cache_valid 200 1M;
        }
        
        # 其他静态资源
        location ~* \.(pdf|doc|docx|zip|tar|gz)$ {
            expires 1d;
            add_header Cache-Control "public";
            try_files $uri =404;
        }

        # SPA路由支持
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # 错误页面
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}