version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: host
      MYSQL_USER: host
      MYSQL_PASSWORD: host123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password --bind-address=0.0.0.0
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - wedding-net

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - wedding-net

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # S3 API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - wedding-net

  # 后端API服务
  server:
    build:
      context: ../server
      dockerfile: Dockerfile
    container_name: server
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_HOST=0.0.0.0
      - DATABASE_URL=mysql://host:host123@mysql:3306/host
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET_NAME=host-photos
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=3000
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - wedding-net

  # 前端Web服务
  web:
    build:
      context: ../web
      dockerfile: Dockerfile
    container_name: web
    restart: always
    ports:
      - "5173:80"  # 内部端口，不对外暴露
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://114.132.225.94:8080/api
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - wedding-net

  # Nginx反向代理 (HTTP only)
  nginx:
    image: nginx:alpine
    container_name: wedding_nginx
    restart: unless-stopped
    ports:
      - "8080:80"  # 映射到8080端口
    volumes:
      - ./nginx-tencent.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      web:
        condition: service_healthy
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - wedding-net

networks:
  wedding-net:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  minio_data: