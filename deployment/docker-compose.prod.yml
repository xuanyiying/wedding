# Wedding Club - 生产环境 Docker Compose 配置
# 高可用、负载均衡、安全优化版本

services:
  # Nginx 负载均衡器和反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: wedding-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
      - certbot_webroot:/var/www/certbot:ro
    depends_on:
      - api1
      - api2
      - minio1
      - redis
    networks:
      - wedding-prod-net
    environment:
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.wedding.service=nginx"
      - "com.wedding.environment=production"

  # Let's Encrypt SSL证书管理
  certbot:
    image: certbot/certbot:latest
    container_name: wedding-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@wedding.example.com --agree-tos --no-eff-email -d wedding.example.com -d www.wedding.example.com
    networks:
      - wedding-prod-net
    profiles:
      - ssl-setup

  # API服务器实例1
  api1:
    build:
      context: ../server
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: wedding-api1
    restart: unless-stopped
    environment:
      # 数据库配置
      - DB_HOST=mysql-master
      - DB_PORT=3306
      - DB_NAME=wedding_club
      - DB_USERNAME=wedding_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_POOL_MIN=5
      - DB_POOL_MAX=20
      - DB_POOL_ACQUIRE=60000
      - DB_POOL_IDLE=10000
      
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - REDIS_POOL_MIN=5
      - REDIS_POOL_MAX=20
      
      # MinIO配置
      - MINIO_ENDPOINT=minio1:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=wedding-files
      - MINIO_REGION=us-east-1
      - MINIO_USE_SSL=false
      
      # JWT配置
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRES_IN=24h
      - JWT_REFRESH_EXPIRES_IN=7d
      
      # SMTP邮件配置
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      
      # 应用配置
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - CORS_ORIGIN=${CORS_ORIGIN}
      - MAX_UPLOAD_SIZE=100mb
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX=1000
      - TZ=Asia/Shanghai
      
      # 监控配置
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - ./logs/api1:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      mysql-master:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio1:
        condition: service_healthy
    networks:
      - wedding-prod-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.wedding.service=api"
      - "com.wedding.instance=1"
      - "com.wedding.environment=production"

  # API服务器实例2
  api2:
    build:
      context: ../server
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: wedding-api2
    restart: unless-stopped
    environment:
      # 与api1相同的环境变量
      - DB_HOST=mysql-master
      - DB_PORT=3306
      - DB_NAME=wedding_club
      - DB_USERNAME=wedding_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_POOL_MIN=5
      - DB_POOL_MAX=20
      - DB_POOL_ACQUIRE=60000
      - DB_POOL_IDLE=10000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - REDIS_POOL_MIN=5
      - REDIS_POOL_MAX=20
      - MINIO_ENDPOINT=minio1:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=wedding-files
      - MINIO_REGION=us-east-1
      - MINIO_USE_SSL=false
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRES_IN=24h
      - JWT_REFRESH_EXPIRES_IN=7d
      
      # SMTP邮件配置
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - CORS_ORIGIN=${CORS_ORIGIN}
      - MAX_UPLOAD_SIZE=100mb
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX=1000
      - TZ=Asia/Shanghai
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - ./logs/api2:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      mysql-master:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio1:
        condition: service_healthy
    networks:
      - wedding-prod-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.wedding.service=api"
      - "com.wedding.instance=2"
      - "com.wedding.environment=production"

  # MySQL主数据库
  mysql-master:
    image: mysql:8.0
    container_name: wedding-mysql-master
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=wedding_club
      - MYSQL_USER=wedding_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_INNODB_BUFFER_POOL_SIZE=1G
      - MYSQL_INNODB_LOG_FILE_SIZE=256M
      - MYSQL_INNODB_FLUSH_LOG_AT_TRX_COMMIT=2
      - MYSQL_INNODB_FLUSH_METHOD=O_DIRECT
      - MYSQL_MAX_CONNECTIONS=500
      - MYSQL_QUERY_CACHE_SIZE=128M
      - TZ=Asia/Shanghai
    volumes:
      - mysql_master_data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      - ./logs/mysql:/var/log/mysql
    ports:
      - "3306:3306"
    networks:
      - wedding-prod-net
      - db-net
    command: >
      --server-id=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
      --log-slave-updates=ON
      --binlog-do-db=wedding_club
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.wedding.service=mysql"
      - "com.wedding.role=master"
      - "com.wedding.environment=production"

  # MySQL从数据库（读副本）
  mysql-slave:
    image: mysql:8.0
    container_name: wedding-mysql-slave
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=wedding_club
      - MYSQL_USER=wedding_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_INNODB_BUFFER_POOL_SIZE=512M
      - MYSQL_INNODB_LOG_FILE_SIZE=128M
      - TZ=Asia/Shanghai
    volumes:
      - mysql_slave_data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./logs/mysql-slave:/var/log/mysql
    depends_on:
      mysql-master:
        condition: service_healthy
    networks:
      - wedding-prod-net
      - db-net
    command: >
      --server-id=2
      --relay-log=mysql-relay-bin
      --log-bin=mysql-bin
      --binlog-format=ROW
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
      --log-slave-updates=ON
      --read-only=ON
      --skip-slave-start
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.wedding.service=mysql"
      - "com.wedding.role=slave"
      - "com.wedding.environment=production"
    profiles:
      - with-slave

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: wedding-redis
    restart: unless-stopped
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    ports:
      - "6379:6379"
    networks:
      - wedding-prod-net
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.wedding.service=redis"
      - "com.wedding.environment=production"

  # MinIO对象存储主实例
  minio1:
    image: minio/minio:latest
    container_name: wedding-minio1
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_CACHE_DRIVES=/cache
      - MINIO_CACHE_QUOTA=80
      - MINIO_CACHE_AFTER=3
      - MINIO_CACHE_WATERMARK_LOW=70
      - MINIO_CACHE_WATERMARK_HIGH=90
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - TZ=Asia/Shanghai
    volumes:
      - minio1_data:/data
      - minio1_cache:/cache
      - ./logs/minio1:/var/log/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - wedding-prod-net
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.wedding.service=minio"
      - "com.wedding.instance=1"
      - "com.wedding.environment=production"

  # MinIO对象存储备份实例
  minio2:
    image: minio/minio:latest
    container_name: wedding-minio2
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_CACHE_DRIVES=/cache
      - MINIO_CACHE_QUOTA=80
      - MINIO_CACHE_AFTER=3
      - MINIO_CACHE_WATERMARK_LOW=70
      - MINIO_CACHE_WATERMARK_HIGH=90
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - TZ=Asia/Shanghai
    volumes:
      - minio2_data:/data
      - minio2_cache:/cache
      - ./logs/minio2:/var/log/minio
    ports:
      - "9002:9000"
      - "9003:9001"
    networks:
      - wedding-prod-net
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.wedding.service=minio"
      - "com.wedding.instance=2"
      - "com.wedding.environment=production"
    profiles:
      - with-minio-ha

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: wedding-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - wedding-prod-net
      - monitoring-net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    labels:
      - "com.wedding.service=prometheus"
      - "com.wedding.environment=production"
    profiles:
      - monitoring

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: wedding-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://wedding.example.com/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - wedding-prod-net
      - monitoring-net
    labels:
      - "com.wedding.service=grafana"
      - "com.wedding.environment=production"
    profiles:
      - monitoring

  # Node Exporter系统监控
  node-exporter:
    image: prom/node-exporter:latest
    container_name: wedding-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring-net
    labels:
      - "com.wedding.service=node-exporter"
      - "com.wedding.environment=production"
    profiles:
      - monitoring

  # 日志收集器
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: wedding-fluentd
    restart: unless-stopped
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/wedding:ro
      - fluentd_data:/fluentd/log
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - wedding-prod-net
      - logging-net
    environment:
      - FLUENTD_CONF=fluent.conf
    labels:
      - "com.wedding.service=fluentd"
      - "com.wedding.environment=production"
    profiles:
      - logging

# 网络配置
networks:
  wedding-prod-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.wedding.network=main"
      - "com.wedding.environment=production"
  
  db-net:
    driver: bridge
    internal: true
    labels:
      - "com.wedding.network=database"
      - "com.wedding.environment=production"
  
  monitoring-net:
    driver: bridge
    internal: true
    labels:
      - "com.wedding.network=monitoring"
      - "com.wedding.environment=production"
  
  logging-net:
    driver: bridge
    internal: true
    labels:
      - "com.wedding.network=logging"
      - "com.wedding.environment=production"

# 数据卷配置
volumes:
  # 数据库数据
  mysql_master_data:
    driver: local
    labels:
      - "com.wedding.volume=mysql-master"
      - "com.wedding.environment=production"
  
  mysql_slave_data:
    driver: local
    labels:
      - "com.wedding.volume=mysql-slave"
      - "com.wedding.environment=production"
  
  # Redis数据
  redis_data:
    driver: local
    labels:
      - "com.wedding.volume=redis"
      - "com.wedding.environment=production"
  
  # MinIO数据
  minio1_data:
    driver: local
    labels:
      - "com.wedding.volume=minio1"
      - "com.wedding.environment=production"
  
  minio1_cache:
    driver: local
    labels:
      - "com.wedding.volume=minio1-cache"
      - "com.wedding.environment=production"
  
  minio2_data:
    driver: local
    labels:
      - "com.wedding.volume=minio2"
      - "com.wedding.environment=production"
  
  minio2_cache:
    driver: local
    labels:
      - "com.wedding.volume=minio2-cache"
      - "com.wedding.environment=production"
  
  # Nginx缓存
  nginx_cache:
    driver: local
    labels:
      - "com.wedding.volume=nginx-cache"
      - "com.wedding.environment=production"
  
  # SSL证书
  certbot_webroot:
    driver: local
    labels:
      - "com.wedding.volume=certbot"
      - "com.wedding.environment=production"
  
  # 监控数据
  prometheus_data:
    driver: local
    labels:
      - "com.wedding.volume=prometheus"
      - "com.wedding.environment=production"
  
  grafana_data:
    driver: local
    labels:
      - "com.wedding.volume=grafana"
      - "com.wedding.environment=production"
  
  # 日志数据
  fluentd_data:
    driver: local
    labels:
      - "com.wedding.volume=fluentd"
      - "com.wedding.environment=production"