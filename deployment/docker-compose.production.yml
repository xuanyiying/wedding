
services:
  # Web前端服务 - 使用本地构建的镜像
  web:
    image: wedding-web:latest
    pull_policy: never
    container_name: wedding-web
    restart: unless-stopped
    volumes:
      - web_static:/usr/share/nginx/html
    networks:
      - wedding-net
    labels:
      - "com.wedding.service=web"
      - "com.wedding.environment=production"

  # Nginx 反向代理 - 使用已有的nginx:alpine镜像
  nginx:
    image: nginx:alpine
    pull_policy: never
    container_name: wedding-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../web/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
      - web_static:/usr/share/nginx/html:ro
    depends_on:
      - web
      - api
    networks:
      - wedding-net
    environment:
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --try=1 --timeout=1 -O /dev/null http://127.0.0.1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.wedding.service=nginx"
      - "com.wedding.environment=production"

  # API服务器 - 使用本地构建的镜像
  api:
    image: wedding-api:latest
    pull_policy: never
    container_name: wedding-api
    restart: unless-stopped
    environment:
      # 数据库配置
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=wedding_club
      - DB_USERNAME=wedding_user
      - DB_PASSWORD=${DB_PASSWORD}
      
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # MinIO配置
      - OSS_TYPE=${OSS_TYPE}
      - OSS_ENDPOINT=${OSS_ENDPOINT}
      - OSS_ACCESS_KEY=${OSS_ACCESS_KEY}
      - OSS_SECRET_KEY=${OSS_SECRET_KEY}
      - OSS_BUCKET=${OSS_BUCKET}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT}
      - VITE_MINIO_URL=${VITE_MINIO_URL}
      
      # JWT配置
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      
      # SMTP邮件配置
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      
      # 应用配置
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - CORS_ORIGIN=${CORS_ORIGIN}
      - TZ=Asia/Shanghai
    volumes:
      - ./logs/api:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - wedding-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    labels:
      - "com.wedding.service=api"
      - "com.wedding.environment=production"

  # MySQL数据库 - 使用已有的mysql:8.0镜像
  mysql:
    image: mysql:8.0
    pull_policy: never
    container_name: wedding-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=wedding_club
      - MYSQL_USER=wedding_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - TZ=Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./logs/mysql:/var/log/mysql
    ports:
      - "3306:3306"
    networks:
      - wedding-net
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=512M
      --max-connections=200
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "com.wedding.service=mysql"
      - "com.wedding.environment=production"

  # Redis缓存服务 - 使用已有的redis:7-alpine镜像
  redis:
    image: redis:7-alpine
    pull_policy: never
    container_name: wedding-redis
    restart: unless-stopped
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    ports:
      - "6379:6379"
    networks:
      - wedding-net
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.wedding.service=redis"
      - "com.wedding.environment=production"

  # MinIO对象存储 - 使用已有的minio/minio镜像
  minio:
    image: minio/minio:latest
    pull_policy: never
    container_name: wedding-minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - TZ=Asia/Shanghai
    volumes:
      - minio_data:/data
      - ./logs/minio:/var/log/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - wedding-net
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.wedding.service=minio"
      - "com.wedding.environment=production"

# 网络配置
networks:
  wedding-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
    labels:
      - "com.wedding.network=main"
      - "com.wedding.environment=production"

# 数据卷配置
volumes:
  # 数据库数据
  mysql_data:
    driver: local
    labels:
      - "com.wedding.volume=mysql"
      - "com.wedding.environment=production"
  
  # Redis数据
  redis_data:
    driver: local
    labels:
      - "com.wedding.volume=redis"
      - "com.wedding.environment=production"
  
  # MinIO数据
  minio_data:
    driver: local
    labels:
      - "com.wedding.volume=minio"
      - "com.wedding.environment=production"
  
  # Web静态文件
  web_static:
    driver: local
    labels:
      - "com.wedding.volume=web-static"
      - "com.wedding.environment=production"