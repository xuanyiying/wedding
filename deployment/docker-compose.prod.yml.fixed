# Wedding Club - 生产环境 Docker Compose 配置 (修复版本)
# 使用本地已有镜像，避免网络拉取问题

services:
  # Web前端服务
  web:
    build:
      context: ../web
      dockerfile: Dockerfile.prod
    container_name: wedding-web
    restart: unless-stopped
    volumes:
      - web_static:/usr/share/nginx/html
    networks:
      - wedding-prod-net
    labels:
      - "com.wedding.service=web"
      - "com.wedding.environment=production"

  # Nginx 负载均衡器和反向代理
  nginx:
    image: nginx:alpine
    container_name: wedding-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
      - web_static:/usr/share/nginx/html:ro
    depends_on:
      - web
      - api
    networks:
      - wedding-prod-net
    environment:
      - TZ=Asia/Shanghai
    labels:
      - "com.wedding.service=nginx"
      - "com.wedding.environment=production"

  # API服务器
  api:
    build:
      context: ../server
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: wedding-api
    restart: unless-stopped
    environment:
      # 数据库配置
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=wedding_club
      - DB_USERNAME=wedding_user
      - DB_PASSWORD=${DB_PASSWORD}
      
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # MinIO配置
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=wedding-files
      
      # JWT配置
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      
      # 应用配置
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - CORS_ORIGIN=${CORS_ORIGIN}
      - TZ=Asia/Shanghai
    volumes:
      - ./logs/api:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - mysql
      - redis
      - minio
    networks:
      - wedding-prod-net
    labels:
      - "com.wedding.service=api"
      - "com.wedding.environment=production"

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: wedding-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=wedding_club
      - MYSQL_USER=wedding_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - TZ=Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./logs/mysql:/var/log/mysql
    ports:
      - "3306:3306"
    networks:
      - wedding-prod-net
    labels:
      - "com.wedding.service=mysql"
      - "com.wedding.environment=production"

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: wedding-redis
    restart: unless-stopped
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    ports:
      - "6379:6379"
    networks:
      - wedding-prod-net
    command: redis-server --requirepass ${REDIS_PASSWORD}
    labels:
      - "com.wedding.service=redis"
      - "com.wedding.environment=production"

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    container_name: wedding-minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - TZ=Asia/Shanghai
    volumes:
      - minio_data:/data
      - ./logs/minio:/var/log/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - wedding-prod-net
    command: server /data --console-address ":9001"
    labels:
      - "com.wedding.service=minio"
      - "com.wedding.environment=production"

# 网络配置
networks:
  wedding-prod-net:
    driver: bridge
    labels:
      - "com.wedding.network=main"
      - "com.wedding.environment=production"

# 数据卷配置
volumes:
  mysql_data:
    driver: local
    labels:
      - "com.wedding.volume=mysql"
      - "com.wedding.environment=production"
  
  redis_data:
    driver: local
    labels:
      - "com.wedding.volume=redis"
      - "com.wedding.environment=production"
  
  minio_data:
    driver: local
    labels:
      - "com.wedding.volume=minio"
      - "com.wedding.environment=production"
  
  nginx_cache:
    driver: local
    labels:
      - "com.wedding.volume=nginx-cache"
      - "com.wedding.environment=production"
  
  web_static:
    driver: local
    labels:
      - "com.wedding.volume=web-static"
      - "com.wedding.environment=production"
