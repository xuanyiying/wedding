# Wedding Club Server - 高度优化的构建 Dockerfile
# 多阶段构建，支持构建缓存和并行优化

# syntax=docker/dockerfile:1.4
# 启用BuildKit语法以支持高级特性

# ============================================================================
# 基础镜像准备阶段 - 预配置基础环境
# ============================================================================
FROM node:22-alpine AS base

# 配置Alpine镜像源，使用国内镜像加速
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories && \
    sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories

# 一次性安装所有系统依赖，减少镜像层数
RUN apk update && \
    apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl \
    dumb-init && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# 配置多个npm镜像源以确保可用性和速度
RUN npm config set registry https://registry.npmmirror.com && \
    npm config set cache /tmp/.npm && \
    npm config set prefer-offline true && \
    npm config set audit false && \
    npm config set fund false && \
    npm config set progress false

# ============================================================================
# 依赖安装阶段 - 利用Docker缓存层优化
# ============================================================================
FROM base AS deps

WORKDIR /app

# 复制依赖文件，利用Docker缓存层
COPY package*.json tsconfig.json ./

# 使用mount缓存和并行安装优化依赖安装速度
RUN --mount=type=cache,target=/tmp/.npm \
    --mount=type=cache,target=/root/.npm \
    npm install \
    --legacy-peer-deps \
    --no-audit \
    --no-fund \
    --progress=false \
    --prefer-offline \
    --maxsockets 10 \
    --registry=https://registry.npmmirror.com || \
    npm install \
    --legacy-peer-deps \
    --no-audit \
    --no-fund \
    --progress=false \
    --registry=https://registry.npm.taobao.org || \
    npm install \
    --legacy-peer-deps \
    --no-audit \
    --no-fund \
    --progress=false

# ============================================================================
# 构建阶段 - 优化构建过程
# ============================================================================
FROM deps AS builder

# 复制源代码（.dockerignore 已排除不必要文件）
COPY . .

# 强制清理旧构建产物并优化构建
RUN rm -rf dist && mkdir -p dist && \
    # 设置Node.js性能优化参数
    export NODE_OPTIONS="--max-old-space-size=4096" && \
    # 并行构建
    npm run build && \
    # 清理开发依赖，保留生产依赖
    npm prune --production --silent && \
    # 清理缓存和临时文件
    npm cache clean --force && \
    rm -rf /tmp/.npm /root/.npm /app/src /app/node_modules/.cache

# ============================================================================
# 生产运行阶段 - 轻量化最终镜像
# ============================================================================

FROM base AS production

# 构建参数
ARG ENVIRONMENT=development
ARG SERVER_IP=localhost

# 设置环境变量
ENV TZ=Asia/Shanghai \
    NODE_ENV=${ENVIRONMENT} \
    PORT=3000 \
    LOG_LEVEL=info \
    SERVER_IP=${SERVER_IP}

# 快速配置运行环境
RUN apk update && \
    apk add --no-cache dumb-init curl && \
    addgroup -g 1001 nodejs && \
    adduser -u 1001 -G nodejs -s /bin/sh -D wedding && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# 设置工作目录并创建目录
WORKDIR /app
RUN mkdir -p logs uploads temp && chown -R wedding:nodejs /app

# 复制构建产物和优化后的生产依赖
COPY --from=builder --chown=wedding:nodejs /app/dist ./dist
COPY --from=builder --chown=wedding:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=wedding:nodejs /app/package*.json ./

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# 切换到非root用户
USER wedding

# 暴露端口
EXPOSE 3000 9090

# 使用dumb-init作为PID 1，处理信号
ENTRYPOINT ["dumb-init", "--"]

# 启动应用
CMD ["node", "dist/server.js"]

# 添加标签
LABEL maintainer="Wedding Club Team" \
    version="1.0.0" \
    description="Wedding Club Server - Unified Build" \
    com.wedding.service="api" \
    com.wedding.environment="${ENVIRONMENT}"