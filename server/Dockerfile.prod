# Wedding Club Server - 生产环境 Dockerfile
# 多阶段构建，优化镜像大小和安全性

# 多阶段构建：构建阶段 + 生产阶段

# 构建阶段 - 使用标准Node.js镜像避免编译依赖
FROM node:18-slim AS builder

# 安装必要的系统依赖
RUN apt-get update && \
    apt-get install -y --no-install-recommends python3 make g++ && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    npm config set registry https://registry.npmmirror.com

WORKDIR /app

# 优化依赖安装：先安装package.json，利用Docker缓存
COPY package*.json tsconfig.json ./
RUN npm ci --silent --prefer-offline

# 复制源代码并构建
COPY . .
RUN npm run build && \
    npm prune --production && \
    npm cache clean --force

# 生产阶段
FROM node:18-slim AS production

# 设置环境变量
ENV TZ=Asia/Shanghai \
    NODE_ENV=production \
    PORT=3000 \
    LOG_LEVEL=info

# 快速配置运行环境
RUN groupadd -g 1001 nodejs && \
    useradd -r -u 1001 -g nodejs wedding && \
    apt-get update && \
    apt-get install -y --no-install-recommends dumb-init curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 设置工作目录并创建目录
WORKDIR /app
RUN mkdir -p logs uploads temp && chown -R wedding:nodejs /app

# 复制构建产物和优化后的生产依赖
COPY --from=builder --chown=wedding:nodejs /app/dist ./dist
COPY --from=builder --chown=wedding:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=wedding:nodejs /app/package*.json ./

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/v1/health || exit 1

# 切换到非root用户
USER wedding

# 暴露端口
EXPOSE 3000 9090

# 使用dumb-init作为PID 1，处理信号
ENTRYPOINT ["dumb-init", "--"]

# 启动应用
CMD ["node", "dist/index.js"]

# 添加标签
LABEL maintainer="Wedding Club Team" \
      version="1.0.0" \
      description="Wedding Club Server - Production" \
      com.wedding.service="api" \
      com.wedding.environment="production"